user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;

    # Map для websocket upgrade
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Upstream — ваше приложение в docker-compose
    upstream app {
        server app:8080;   # если app — имя сервиса
        # можно добавить дополнительные серверы или IP:port
    }

    access_log /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log;

    # --- Default server: если запрос пришёл по IP/неизвестному Host, редиректим на канонический домен
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # если нужно обслуживать acme-challenge для certbot (даже без SSL)
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri =404;
        }

        # редирект на канонический домен (HTTP)
        return 301 http://brand-battles.ru$request_uri;
    }

    # --- Основной HTTP-сервер для домена (без SSL)
    server {
        listen 80;
        listen [::]:80;
        server_name brand-battles.ru;

        # Опционально: статический ACME-challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri =404;
        }

        # SignalR / WebSocket маршрут (например /gameHub)
        location /gameHub {
            proxy_pass http://app;
            proxy_http_version 1.1;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            proxy_buffering off;
            proxy_cache_bypass $http_upgrade;

            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }

        # Всё остальное — проксируем на приложение
        location / {
            proxy_pass http://app;
            proxy_http_version 1.1;

            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            proxy_buffering off;

            proxy_buffers 8 16k;
            proxy_busy_buffers_size 32k;
        }

        access_log /var/log/nginx/brand-battles.access.log;
        error_log  /var/log/nginx/brand-battles.error.log;
    }

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
